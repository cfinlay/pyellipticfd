import matplotlib.pyplot as plt
import numpy as np
import distmesh as dm
from scipy.spatial import ConvexHull, Delaunay

from pyellipticfd.fdclasses import FDTriMesh

# Uniform grid on unit circle
# ---------------------------
fd = lambda p : np.sqrt((p**2).sum(1))-1.0
p, _ = dm.distmesh2d(fd, dm.huniform, 0.1, (-1,-1,1,1))

# delete boundary points generated by distmesh
cvx = ConvexHull(p)
boundary = cvx.vertices
p = p[np.in1d(np.arange(p.shape[0]),boundary,invert=True)]

# replace with a finer boundary resolution
th = np.linspace(0,2*np.pi,250)
th = th[0:-1]
p = np.concatenate([p,np.array([np.cos(th),np.sin(th)]).T])
boundary = np.arange(p.shape[0]-th.size,p.shape[0])
interior = np.arange(p.shape[0]-th.size)

# Get triangulation
dly = Delaunay(p)
t = dly.simplices
plt.close()

Gs = FDTriMesh(p, t,  boundary=boundary, interior = interior, angular_resolution=3/4*np.pi)
plt.plot(Gs.points[:,0], Gs.points[:,1],'ro',ms=.5)
plt.show()

# Example point and neighbours
i=8
ix = Gs.neighbours[Gs.neighbours[:,0]==i,1]
plt.plot(Gs.points[i,0],Gs.points[i,1],'bx')
plt.plot(Gs.points[ix,0],Gs.points[ix,1],'bo',ms=1)

ix = Gs.simplices[Gs.simplices[:,0]==i,1:]
spts = Gs.points[ix]
for pair in spts:
    plt.plot(pair[:,0],pair[:,1],'k',linewidth=.5)

plt.show()
